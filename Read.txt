SHOPPING CART PROCCESS

Express or hbs generator
BootStrap templete
Nav bar 
Products added
Setting layout and partials
Route setting for admin and user
User navbar
Admin navbar
Admin page
Products add form 


product-delete
Getting product id

method1
hbs: <td><a href="/admin/delete-product?id={{this._id}}&name=arun" class="btn btn-danger">Delete</a></td>
js: router.get('/delete-product/',(req, res,next)=>{
  //for getting product id
  let proId=req.query.id
  console.log(proId)
  console.log(req.query.name)
})
//values passing through '/?=' and reciving through 'query.'

method2
hbs: <td><a href="/admin/delete-product/{{this._id}}" class="btn btn-danger">Delete</a></td>
js: router.get('/delete-product/:id',(req, res,next)=>{
  //for getting product id through paramas
  let proId=req.params.id
  console.log(proId)
})

ADD TO CART CONCEPT: 
Creating collection cart by using user id and add products id.
After add to cart user can purchase the items then the cart remain empty

aggregate() in MongoDB
matching and get the data

Ajax: to update special part of the page. Write in js

$unwind: create multiple array according to condition
[
  {
    _id: new ObjectId('6671a7a9aa922090a9828486'),
    userName: 'Arun ',
    user: '666c52ce48c874c110eda1f9',
    products: [ [Object], [Object] ]
  }
]
$unwind: '$products'
[
  {
    _id: new ObjectId('6671d4dd6e6012f63bd79dde'),
    userName: 'Arun ',
    user: '666c52ce48c874c110eda1f9',
    products: { item: '6669bc50b0c025eaa499ce32', quantity: 1 }
  },
  {
    _id: new ObjectId('6671d4dd6e6012f63bd79dde'),
    userName: 'Arun ',
    user: '666c52ce48c874c110eda1f9',
    products: { item: '6669bcdfb0c025eaa499ce34', quantity: 1 }
  }
]